Asked graph properties: length=10 ; width=8
                        r=200 ; w=200 ; m=300 ; f=300
Lecture du fihier contenant la liste de modules:
modules.csvFichier correctement ouvert.
Verrification du contenu:
Puzzle: 5 0 0 95
ConnectsTheDots: 0 0 30 70
HiddenObjects: 5 0 20 75
CowTrainMaths: 0 0 70 30
CowTrainReading: 70 0 0 30
TextReading: 65 0 0 35
Ordering: 0 0 75 25
WritingLetters: 0 75 0 25
WritingWords: 0 90 0 10
HoledText: 80 10 0 10
TextUnderstanding: 95 0 0 5
AlphabetSong: 20 0 0 80
NumberInWords/Figure: 15 0 75 10
HoledWords: 65 25 0 10
TimeReading: 0 0 95 5

Set :
1*[Con5] : ConnectsTheDots: 0 0 30 70
1*[Hid3] : HiddenObjects: 5 0 20 75
1*[Cow3] : CowTrainMaths: 0 0 70 30
1*[Cow5] : CowTrainReading: 70 0 0 30
1*[Tex1] : TextReading: 65 0 0 35
1*[Wri4] : WritingLetters: 0 75 0 25
1*[Wri2] : WritingWords: 0 90 0 10
1*[Hol0] : HoledWords: 65 25 0 10
2*[Tim1] : TimeReading: 0 0 95 5

-dep6--Con5--Hid3--Cow3--Cow5--Tex1--Wri4--Wri2--Hol0--Tim1--Tim1--arr7-

Set :
2*[Hid3] : HiddenObjects: 5 0 20 75
1*[Wri4] : WritingLetters: 0 75 0 25
1*[Wri2] : WritingWords: 0 90 0 10
1*[Tex7] : TextUnderstanding: 95 0 0 5
1*[Alp2] : AlphabetSong: 20 0 0 80
1*[Num0] : NumberInWords/Figure: 15 0 75 10
1*[Hol0] : HoledWords: 65 25 0 10
2*[Tim1] : TimeReading: 0 0 95 5
add->start
ModuleGE[dep6]->bestfork->start
ModuleGE[dep6]->bestfork>after find
Node[dep6]->bestfork->no match
ModuleGE[Con5]->bestfork->start
ModuleGE[Con5]->bestfork>after find
Node[Con5]->bestfork->no match
Node[Con5]->bestfork->new fork place
ModuleGE[Hid3]->bestfork->start
ModuleGE[Hid3]->bestfork>after find
ModuleGE[Hid3]->bestfork->match
Node[Hid3]->bestfork->module erased
Node[Hid3]->bestfork->moving
Node[Hid3]->bestfork->recursive call and exit
ModuleGE[Cow3]->bestfork->start
ModuleGE[Cow3]->bestfork>after find
Node[Cow3]->bestfork->no match
ModuleGE[Cow5]->bestfork->start
ModuleGE[Cow5]->bestfork>after find
Node[Cow5]->bestfork->no match
ModuleGE[Tex1]->bestfork->start
ModuleGE[Tex1]->bestfork>after find
Node[Tex1]->bestfork->no match
ModuleGE[Wri4]->bestfork->start
ModuleGE[Wri4]->bestfork>after find
ModuleGE[Wri4]->bestfork->match
Node[Wri4]->bestfork->module erased
Node[Wri4]->bestfork->moving
Node[Wri4]->bestfork->recursive call and exit
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
ModuleGE[Wri2]->bestfork->match
Node[Wri2]->bestfork->module erased
Node[Wri2]->bestfork->moving
Node[Wri2]->bestfork->recursive call and exit
ModuleGE[Hol0]->bestfork->start
ModuleGE[Hol0]->bestfork>after find
ModuleGE[Hol0]->bestfork->match
Node[Hol0]->bestfork->module erased
Node[Hol0]->bestfork->moving
Node[Hol0]->bestfork->recursive call and exit
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
ModuleGE[Tim1]->bestfork->match
Node[Tim1]->bestfork->module erased
Node[Tim1]->bestfork->moving
Node[Tim1]->bestfork->recursive call and exit
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
ModuleGE[Tim1]->bestfork->match
Node[Tim1]->bestfork->module erased
Node[Tim1]->bestfork->moving
Node[Tim1]->bestfork->recursive call and exit
ModuleGE[arr7]->bestfork->start
ModuleGE[arr7]->bestfork>after find
Node[arr7]->bestfork->no match
add->after bestFork
1*Hid3
1*Tex7
1*Alp2
1*Num0
-Con5--Cow3--Cow5--Tex1--arr7-
Node[Con5]->bestJunction->start
Node[Con5]->bestJunction->forward
Node[Con5]->bestJunction->module not found
Node[Cow3]->bestJunction->start
Node[Cow3]->bestJunction->forward
Node[Cow3]->bestJunction->module not found
Node[Cow5]->bestJunction->start
Node[Cow5]->bestJunction->forward
Node[Cow5]->bestJunction->module not found
Node[Tex1]->bestJunction->start
Node[Tex1]->bestJunction->forward
Node[Tex1]->bestJunction->module not found
Node[arr7]->bestJunction->start
Node[arr7]->bestJunction->forward
Node[arr7]->bestJunction->module found or null
Node[arr7]->bestJunction->new junction place
Node[arr7]->bestJunction->recursive call
Node[arr7]->bestJunction->junctionPlace still on this path
Node[arr7]->bestJunction->exit
add->afterBestJunction
-arr7-
add->path
add->Modules left:
1*Hid3
1*Tex7
1*Alp2
1*Num0
add->forking right
add->forked first Node: Hid3
add->node Tex7
add->node Alp2
add->node Num0
add->pathed
add->junction right
add->juncted
-dep6--Hid3--Wri4--Wri2--Hol0--Tim1--Tim1-<-Con5--Cow3--Cow5--Tex1->-arr7-
                                          <-Hid3--Tex7--Alp2--Num0->

Set :
1*[Puz6] : Puzzle: 5 0 0 95
1*[Hid3] : HiddenObjects: 5 0 20 75
2*[Cow3] : CowTrainMaths: 0 0 70 30
1*[Ord8] : Ordering: 0 0 75 25
2*[Wri2] : WritingWords: 0 90 0 10
1*[Hol9] : HoledText: 80 10 0 10
1*[Tex7] : TextUnderstanding: 95 0 0 5
1*[Num0] : NumberInWords/Figure: 15 0 75 10
add->start
ModuleGE[dep6]->bestfork->start
ModuleGE[dep6]->bestfork>after find
Node[dep6]->bestfork->no match
ModuleGE[Hid3]->bestfork->start
ModuleGE[Hid3]->bestfork>after find
ModuleGE[Hid3]->bestfork->match
Node[Hid3]->bestfork->module erased
Node[Hid3]->bestfork->recursive call and exit
ModuleGE[Wri4]->bestfork->start
ModuleGE[Wri4]->bestfork>after find
Node[Wri4]->bestfork->no match
Node[Wri4]->bestfork->new fork place
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
ModuleGE[Wri2]->bestfork->match
Node[Wri2]->bestfork->module erased
Node[Wri2]->bestfork->moving
Node[Wri2]->bestfork->recursive call and exit
ModuleGE[Hol0]->bestfork->start
ModuleGE[Hol0]->bestfork>after find
Node[Hol0]->bestfork->no match
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
Node[Tim1]->bestfork->no match
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
Node[Tim1]->bestfork->no match
Fork->bestFork->start
Fork->bestFork->fork place already found, exit
add->after bestFork
1*Puz6
2*Cow3
1*Ord8
1*Wri2
1*Hol9
1*Tex7
1*Num0
-Wri4--Hol0--Tim1--Tim1-<-Con5--Cow3--Cow5--Tex1->-arr7-
                        <-Hid3--Tex7--Alp2--Num0->
Node[Wri4]->bestJunction->start
Node[Wri4]->bestJunction->forward
Node[Wri4]->bestJunction->module not found
Node[Hol0]->bestJunction->start
Node[Hol0]->bestJunction->forward
Node[Hol0]->bestJunction->module not found
Node[Tim1]->bestJunction->start
Node[Tim1]->bestJunction->forward
Node[Tim1]->bestJunction->module not found
Node[Tim1]->bestJunction->start
Node[Tim1]->bestJunction->forward
Node[Tim1]->bestJunction->module not found
Fork->bestJunction->start
Fork->bestJunction->moving forward
Fork->bestJunction->side = both
Fork->bestJunction->left recursive call
Node[Con5]->bestJunction->start
Node[Con5]->bestJunction->forward
Node[Con5]->bestJunction->module not found
Node[Cow3]->bestJunction->start
Node[Cow3]->bestJunction->forward
Node[Cow3]->bestJunction->module found or null
Node[Cow3]->bestJunction->removing module
Node[Cow3]->bestJunction->new junction place
Node[Cow3]->bestJunction->recursive call
Node[Cow5]->bestJunction->start
Node[Cow5]->bestJunction->forward
Node[Cow5]->bestJunction->module not found
Node[Cow5]->bestJunction->moving node
Node[Cow5]->bestJunction->recursive call and exit
Node[Tex1]->bestJunction->start
Node[Tex1]->bestJunction->forward
Node[Tex1]->bestJunction->module not found
Node[Tex1]->bestJunction->moving node
Node[Tex1]->bestJunction->recursive call and exit
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned true (good result)
Junction->bestJunction->exit
Node[Cow3]->bestJunction->junctionPlace still on this path
Node[Cow3]->bestJunction->exit
Fork->bestJunction->right recursive call
Node[Hid3]->bestJunction->start
Node[Hid3]->bestJunction->forward
Node[Hid3]->bestJunction->module not found
Node[Tex7]->bestJunction->start
Node[Tex7]->bestJunction->forward
Node[Tex7]->bestJunction->module found or null
Node[Tex7]->bestJunction->removing module
Node[Tex7]->bestJunction->new junction place
Node[Tex7]->bestJunction->recursive call
Node[Alp2]->bestJunction->start
Node[Alp2]->bestJunction->forward
Node[Alp2]->bestJunction->module not found
Node[Alp2]->bestJunction->moving node
Node[Alp2]->bestJunction->recursive call and exit
Node[Num0]->bestJunction->start
Node[Num0]->bestJunction->forward
Node[Num0]->bestJunction->module found or null
Node[Num0]->bestJunction->removing module
Node[Num0]->bestJunction->recursive call
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned true (good result)
Junction->bestJunction->exit
Node[Num0]->bestJunction->junctionPlace still on this path
Node[Num0]->bestJunction->exit
Node[Tex7]->bestJunction->junctionPlace still on this path
Node[Tex7]->bestJunction->exit
Fork->bestJunction->back from recursive calls
Fork->bestJunction->choosing right
Fork->bestJunction->exit
add->afterBestJunction
-Tex7--Num0->
add->path
add->Modules left:
1*Puz6
2*Cow3
1*Ord8
1*Wri2
1*Hol9
add->forking right
add->forked first Node: Puz6
add->node Cow3
add->node Cow3
add->node Ord8
add->node Wri2
add->node Hol9
add->pathed
add->junction right
add->juncted
-dep6--Hid3--Wri2-<-Wri4--Hol0--Tim1--Tim1-<-Con5--Cow5--Tex1--Cow3->-arr7-
                                           <-Hid3--Alp2->-Tex7--Num0->
                  <-Puz6--Cow3--Cow3--Ord8--Wri2--Hol9->

Set :
1*[Con5] : ConnectsTheDots: 0 0 30 70
1*[Hid3] : HiddenObjects: 5 0 20 75
1*[Wri4] : WritingLetters: 0 75 0 25
1*[Wri2] : WritingWords: 0 90 0 10
1*[Hol9] : HoledText: 80 10 0 10
1*[Alp2] : AlphabetSong: 20 0 0 80
2*[Num0] : NumberInWords/Figure: 15 0 75 10
1*[Hol0] : HoledWords: 65 25 0 10
1*[Tim1] : TimeReading: 0 0 95 5
add->start
ModuleGE[dep6]->bestfork->start
ModuleGE[dep6]->bestfork>after find
Node[dep6]->bestfork->no match
ModuleGE[Hid3]->bestfork->start
ModuleGE[Hid3]->bestfork>after find
ModuleGE[Hid3]->bestfork->match
Node[Hid3]->bestfork->module erased
Node[Hid3]->bestfork->recursive call and exit
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
ModuleGE[Wri2]->bestfork->match
Node[Wri2]->bestfork->module erased
Node[Wri2]->bestfork->recursive call and exit
Fork->bestFork->start
Fork->bestFork->right recursive call
ModuleGE[Puz6]->bestfork->start
ModuleGE[Puz6]->bestfork>after find
Node[Puz6]->bestfork->no match
Node[Puz6]->bestfork->new fork place
ModuleGE[Cow3]->bestfork->start
ModuleGE[Cow3]->bestfork>after find
Node[Cow3]->bestfork->no match
ModuleGE[Cow3]->bestfork->start
ModuleGE[Cow3]->bestfork>after find
Node[Cow3]->bestfork->no match
ModuleGE[Ord8]->bestfork->start
ModuleGE[Ord8]->bestfork>after find
Node[Ord8]->bestfork->no match
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
Node[Wri2]->bestfork->no match
ModuleGE[Hol9]->bestfork->start
ModuleGE[Hol9]->bestfork>after find
ModuleGE[Hol9]->bestfork->match
Node[Hol9]->bestfork->module erased
Node[Hol9]->bestfork->moving
Node[Hol9]->bestfork->recursive call and exit
Junction->bestFork
Fork->bestFork->left recursive call
ModuleGE[Wri4]->bestfork->start
ModuleGE[Wri4]->bestfork>after find
ModuleGE[Wri4]->bestfork->match
Node[Wri4]->bestfork->module erased
Node[Wri4]->bestfork->recursive call and exit
ModuleGE[Hol0]->bestfork->start
ModuleGE[Hol0]->bestfork>after find
ModuleGE[Hol0]->bestfork->match
Node[Hol0]->bestfork->module erased
Node[Hol0]->bestfork->recursive call and exit
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
ModuleGE[Tim1]->bestfork->match
Node[Tim1]->bestfork->module erased
Node[Tim1]->bestfork->recursive call and exit
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
Node[Tim1]->bestfork->no match
Node[Tim1]->bestfork->new fork place
Fork->bestFork->start
Fork->bestFork->fork place already found, exit
Fork->bestFork->back from recursive calls
Fork->bestFork->left>=right, delete and exit
add->after bestFork
1*Con5
1*Hol9
1*Alp2
2*Num0
-Tim1-<-Con5--Cow5--Tex1--Cow3->-arr7-
      <-Hid3--Alp2->-Tex7--Num0->
Node[Tim1]->bestJunction->start
Node[Tim1]->bestJunction->forward
Node[Tim1]->bestJunction->module not found
Fork->bestJunction->start
Fork->bestJunction->moving forward
Fork->bestJunction->side = both
Fork->bestJunction->left recursive call
Node[Con5]->bestJunction->start
Node[Con5]->bestJunction->forward
Node[Con5]->bestJunction->module found or null
Node[Con5]->bestJunction->removing module
Node[Con5]->bestJunction->new junction place
Node[Con5]->bestJunction->recursive call
Node[Cow5]->bestJunction->start
Node[Cow5]->bestJunction->forward
Node[Cow5]->bestJunction->module not found
Node[Cow5]->bestJunction->moving node
Node[Cow5]->bestJunction->recursive call and exit
Node[Tex1]->bestJunction->start
Node[Tex1]->bestJunction->forward
Node[Tex1]->bestJunction->module not found
Node[Tex1]->bestJunction->moving node
Node[Tex1]->bestJunction->recursive call and exit
Node[Cow3]->bestJunction->start
Node[Cow3]->bestJunction->forward
Node[Cow3]->bestJunction->module not found
Node[Cow3]->bestJunction->moving node
Node[Cow3]->bestJunction->recursive call and exit
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned true (good result)
Junction->bestJunction->exit
Node[Con5]->bestJunction->junctionPlace still on this path
Node[Con5]->bestJunction->exit
Fork->bestJunction->right recursive call
Node[Hid3]->bestJunction->start
Node[Hid3]->bestJunction->forward
Node[Hid3]->bestJunction->module not found
Node[Alp2]->bestJunction->start
Node[Alp2]->bestJunction->forward
Node[Alp2]->bestJunction->module found or null
Node[Alp2]->bestJunction->removing module
Node[Alp2]->bestJunction->new junction place
Node[Alp2]->bestJunction->recursive call
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned false=> junction place is bad
Junction->bestJunction->not compatible side
Junction->bestJunction->exit
Node[Alp2]->bestJunction->junctionPlace was moved to another area
Node[Alp2]->bestJunction->replacing module in the list
Node[Alp2]->bestJunction->exit
Fork->bestJunction->back from recursive calls
Fork->bestJunction->choosing left
Fork->bestJunction->exit
add->afterBestJunction
-Con5->-arr7-
add->path
add->Modules left:
1*Hol9
1*Alp2
2*Num0
add->forking left
add->forked first Node: Hol9
add->node Alp2
add->node Num0
add->node Num0
add->pathed
add->junction left
add->juncted
-dep6--Hid3--Wri2-<-Wri4--Hol0--Tim1-<-Hol9--Alp2--Num0--Num0->-Con5->-arr7-
                                     <-Tim1-<-Cow5--Tex1--Cow3->
                                            <-Hid3--Alp2->-Tex7--Num0->
                  <-Hol9--Puz6--Cow3--Cow3--Ord8--Wri2->

Set :
1*[Hid3] : HiddenObjects: 5 0 20 75
2*[Cow3] : CowTrainMaths: 0 0 70 30
1*[Ord8] : Ordering: 0 0 75 25
1*[Wri4] : WritingLetters: 0 75 0 25
1*[Wri2] : WritingWords: 0 90 0 10
1*[Tex7] : TextUnderstanding: 95 0 0 5
1*[Alp2] : AlphabetSong: 20 0 0 80
1*[Num0] : NumberInWords/Figure: 15 0 75 10
1*[Hol0] : HoledWords: 65 25 0 10
add->start
ModuleGE[dep6]->bestfork->start
ModuleGE[dep6]->bestfork>after find
Node[dep6]->bestfork->no match
ModuleGE[Hid3]->bestfork->start
ModuleGE[Hid3]->bestfork>after find
ModuleGE[Hid3]->bestfork->match
Node[Hid3]->bestfork->module erased
Node[Hid3]->bestfork->recursive call and exit
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
ModuleGE[Wri2]->bestfork->match
Node[Wri2]->bestfork->module erased
Node[Wri2]->bestfork->recursive call and exit
Fork->bestFork->start
Fork->bestFork->right recursive call
ModuleGE[Hol9]->bestfork->start
ModuleGE[Hol9]->bestfork>after find
Node[Hol9]->bestfork->no match
Node[Hol9]->bestfork->new fork place
ModuleGE[Puz6]->bestfork->start
ModuleGE[Puz6]->bestfork>after find
Node[Puz6]->bestfork->no match
ModuleGE[Cow3]->bestfork->start
ModuleGE[Cow3]->bestfork>after find
ModuleGE[Cow3]->bestfork->match
Node[Cow3]->bestfork->module erased
Node[Cow3]->bestfork->moving
Node[Cow3]->bestfork->recursive call and exit
ModuleGE[Cow3]->bestfork->start
ModuleGE[Cow3]->bestfork>after find
ModuleGE[Cow3]->bestfork->match
Node[Cow3]->bestfork->module erased
Node[Cow3]->bestfork->moving
Node[Cow3]->bestfork->recursive call and exit
ModuleGE[Ord8]->bestfork->start
ModuleGE[Ord8]->bestfork>after find
ModuleGE[Ord8]->bestfork->match
Node[Ord8]->bestfork->module erased
Node[Ord8]->bestfork->moving
Node[Ord8]->bestfork->recursive call and exit
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
Node[Wri2]->bestfork->no match
Junction->bestFork
Fork->bestFork->left recursive call
ModuleGE[Wri4]->bestfork->start
ModuleGE[Wri4]->bestfork>after find
ModuleGE[Wri4]->bestfork->match
Node[Wri4]->bestfork->module erased
Node[Wri4]->bestfork->recursive call and exit
ModuleGE[Hol0]->bestfork->start
ModuleGE[Hol0]->bestfork>after find
ModuleGE[Hol0]->bestfork->match
Node[Hol0]->bestfork->module erased
Node[Hol0]->bestfork->recursive call and exit
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
Node[Tim1]->bestfork->no match
Node[Tim1]->bestfork->new fork place
Fork->bestFork->start
Fork->bestFork->fork place already found, exit
Fork->bestFork->back from recursive calls
Fork->bestFork->left<right, delete and exit
add->after bestFork
1*Wri4
1*Tex7
1*Alp2
1*Num0
1*Hol0
-Hol9--Puz6--Wri2->
Node[Hol9]->bestJunction->start
Node[Hol9]->bestJunction->forward
Node[Hol9]->bestJunction->module not found
Node[Puz6]->bestJunction->start
Node[Puz6]->bestJunction->forward
Node[Puz6]->bestJunction->module not found
Node[Wri2]->bestJunction->start
Node[Wri2]->bestJunction->forward
Node[Wri2]->bestJunction->module not found
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned true (good result)
Junction->bestJunction->new junction place
Junction->bestJunction->side != calling side => back recursive call
Junction->bestJunction->left recursive call
Node[Alp2]->bestJunction->start
Node[Alp2]->bestJunction->backward
Node[Alp2]->bestJunction->module found, removing module
Node[Alp2]->moving node
Node[Alp2]->bestJunction->recursive call
Node[Hid3]->bestJunction->start
Node[Hid3]->bestJunction->backward
Node[Hid3]->bestJunction->module not found, recursive call
Fork->bestJunction->start
Fork->bestJunction->moving backward
Fork->bestJunction->exit
Node[Hid3]->bestJunction->exit
Node[Alp2]->bestJunction->exit
Junction->bestJunction->back from back recursive call
Junction->bestJunction->new junction chosen
add->afterBestJunction
-Alp2->-Tex7--Num0->
add->path
add->Modules left:
1*Wri4
1*Hol0
add->forking left
add->forked first Node: Wri4
add->node Hol0
add->pathed
add->junction right
add->juncted
-dep6--Hid3--Wri2-<-Wri4--Hol0--Tim1-<-Hol9--Alp2--Num0--Num0->-Con5->-arr7-
                                     <-Tim1-<-Cow5--Tex1--Cow3->
                                            <-Hid3->-Alp2->-Tex7--Num0->
                  <-Cow3--Cow3--Ord8-<-Wri4--Hol0->
                                     <-Hol9--Puz6--Wri2->

Set :
1*[Puz6] : Puzzle: 5 0 0 95
1*[Con5] : ConnectsTheDots: 0 0 30 70
1*[Ord8] : Ordering: 0 0 75 25
2*[Wri2] : WritingWords: 0 90 0 10
1*[Hol9] : HoledText: 80 10 0 10
1*[Tex7] : TextUnderstanding: 95 0 0 5
1*[Alp2] : AlphabetSong: 20 0 0 80
2*[Tim1] : TimeReading: 0 0 95 5
add->start
ModuleGE[dep6]->bestfork->start
ModuleGE[dep6]->bestfork>after find
Node[dep6]->bestfork->no match
ModuleGE[Hid3]->bestfork->start
ModuleGE[Hid3]->bestfork>after find
Node[Hid3]->bestfork->no match
Node[Hid3]->bestfork->new fork place
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
ModuleGE[Wri2]->bestfork->match
Node[Wri2]->bestfork->module erased
Node[Wri2]->bestfork->moving
Node[Wri2]->bestfork->recursive call and exit
Fork->bestFork->start
Fork->bestFork->fork place already found, exit
add->after bestFork
1*Puz6
1*Con5
1*Ord8
1*Wri2
1*Hol9
1*Tex7
1*Alp2
2*Tim1
-Hid3-<-Wri4--Hol0--Tim1-<-Hol9--Alp2--Num0--Num0->-Con5->-arr7-
                         <-Tim1-<-Cow5--Tex1--Cow3->
                                <-Hid3->-Alp2->-Tex7--Num0->
      <-Cow3--Cow3--Ord8-<-Wri4--Hol0->
                         <-Hol9--Puz6--Wri2->
Node[Hid3]->bestJunction->start
Node[Hid3]->bestJunction->forward
Node[Hid3]->bestJunction->module not found
Fork->bestJunction->start
Fork->bestJunction->moving forward
Fork->bestJunction->side = both
Fork->bestJunction->left recursive call
Node[Wri4]->bestJunction->start
Node[Wri4]->bestJunction->forward
Node[Wri4]->bestJunction->module not found
Node[Hol0]->bestJunction->start
Node[Hol0]->bestJunction->forward
Node[Hol0]->bestJunction->module not found
Node[Tim1]->bestJunction->start
Node[Tim1]->bestJunction->forward
Node[Tim1]->bestJunction->module found or null
Node[Tim1]->bestJunction->removing module
Node[Tim1]->bestJunction->new junction place
Node[Tim1]->bestJunction->recursive call
Fork->bestJunction->start
Fork->bestJunction->moving forward
Fork->bestJunction->junctionPlace already found
Fork->bestJunction->left contains() call
Fork->bestJunction->left contains() fails
Fork->bestJunction->this junction place is bad => junction place not found
Fork->bestJunction->side = left => left recursive call
Node[Hol9]->bestJunction->start
Node[Hol9]->bestJunction->forward
Node[Hol9]->bestJunction->module found or null
Node[Hol9]->bestJunction->removing module
Node[Hol9]->bestJunction->new junction place
Node[Hol9]->bestJunction->recursive call
Node[Alp2]->bestJunction->start
Node[Alp2]->bestJunction->forward
Node[Alp2]->bestJunction->module found or null
Node[Alp2]->bestJunction->removing module
Node[Alp2]->bestJunction->recursive call
Node[Num0]->bestJunction->start
Node[Num0]->bestJunction->forward
Node[Num0]->bestJunction->module not found
Node[Num0]->bestJunction->moving node
Node[Num0]->bestJunction->recursive call and exit
Node[Num0]->bestJunction->start
Node[Num0]->bestJunction->forward
Node[Num0]->bestJunction->module not found
Node[Num0]->bestJunction->moving node
Node[Num0]->bestJunction->recursive call and exit
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned true (good result)
Junction->bestJunction->exit
Node[Alp2]->bestJunction->junctionPlace still on this path
Node[Alp2]->bestJunction->exit
Node[Hol9]->bestJunction->junctionPlace still on this path
Node[Hol9]->bestJunction->exit
Fork->bestJunction->back from left recursive call
Fork->bestJunction->exit
Node[Tim1]->bestJunction->junctionPlace was moved to another area
Node[Tim1]->bestJunction->replacing module in the list
Node[Tim1]->bestJunction->exit
Fork->bestJunction->right recursive call
Node[Cow3]->bestJunction->start
Node[Cow3]->bestJunction->forward
Node[Cow3]->bestJunction->module not found
Node[Cow3]->bestJunction->start
Node[Cow3]->bestJunction->forward
Node[Cow3]->bestJunction->module not found
Node[Ord8]->bestJunction->start
Node[Ord8]->bestJunction->forward
Node[Ord8]->bestJunction->module found or null
Node[Ord8]->bestJunction->removing module
Node[Ord8]->bestJunction->new junction place
Node[Ord8]->bestJunction->recursive call
Fork->bestJunction->start
Fork->bestJunction->moving forward
Fork->bestJunction->junctionPlace already found
Fork->bestJunction->right contains() call
Fork->bestJunction->right bestFork fails
Fork->bestJunction->this junction place is bad => junction place not found
Fork->bestJunction->side = right => right recursive call
Node[Hol9]->bestJunction->start
Node[Hol9]->bestJunction->forward
Node[Hol9]->bestJunction->module found or null
Node[Hol9]->bestJunction->removing module
Node[Hol9]->bestJunction->new junction place
Node[Hol9]->bestJunction->recursive call
Node[Puz6]->bestJunction->start
Node[Puz6]->bestJunction->forward
Node[Puz6]->bestJunction->module found or null
Node[Puz6]->bestJunction->removing module
Node[Puz6]->bestJunction->recursive call
Node[Wri2]->bestJunction->start
Node[Wri2]->bestJunction->forward
Node[Wri2]->bestJunction->module found or null
Node[Wri2]->bestJunction->removing module
Node[Wri2]->bestJunction->recursive call
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned false=> junction place is bad
Junction->bestJunction->compatible side => forward recursive call
Node[Tex7]->bestJunction->start
Node[Tex7]->bestJunction->forward
Node[Tex7]->bestJunction->module found or null
Node[Tex7]->bestJunction->removing module
Node[Tex7]->bestJunction->new junction place
Node[Tex7]->bestJunction->recursive call
Node[Num0]->bestJunction->start
Node[Num0]->bestJunction->forward
Node[Num0]->bestJunction->module not found
Node[Num0]->bestJunction->moving node
Node[Num0]->bestJunction->recursive call and exit
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned true (good result)
Junction->bestJunction->exit
Node[Tex7]->bestJunction->junctionPlace still on this path
Node[Tex7]->bestJunction->exit
Junction->bestJunction->back from recursive call, exit
Node[Wri2]->bestJunction->junctionPlace was moved to another area
Node[Wri2]->bestJunction->replacing module in the list
Node[Wri2]->bestJunction->exit
Node[Puz6]->bestJunction->junctionPlace was moved to another area
Node[Puz6]->bestJunction->replacing module in the list
Node[Puz6]->bestJunction->exit
Node[Hol9]->bestJunction->junctionPlace was moved to another area
Node[Hol9]->bestJunction->replacing module in the list
Node[Hol9]->bestJunction->exit
Fork->bestJunction->back from right recursive call
Fork->bestJunction->exit
Node[Ord8]->bestJunction->junctionPlace was moved to another area
Node[Ord8]->bestJunction->replacing module in the list
Node[Ord8]->bestJunction->exit
Fork->bestJunction->back from recursive calls
Fork->bestJunction->choosing left
Fork->bestJunction->exit
add->afterBestJunction
-Hol9--Alp2->-Con5->-arr7-
add->path
add->Modules left:
1*Puz6
1*Ord8
1*Wri2
1*Tex7
2*Tim1
add->forking left
add->forked first Node: Puz6
add->node Ord8
add->node Wri2
add->node Tex7
add->node Tim1
add->node Tim1
add->pathed
add->junction left
add->juncted
-dep6--Wri2-<-Puz6--Ord8--Wri2--Tex7--Tim1--Tim1->-Hol9--Alp2->-Con5->-arr7-
            <-Hid3-<-Wri4--Hol0--Tim1-<-Num0--Num0->
                                      <-Tim1-<-Cow5--Tex1--Cow3->
                                             <-Hid3->-Alp2->-Num0--Tex7->
                   <-Cow3--Cow3--Ord8-<-Wri4--Hol0->
                                      <-Hol9--Puz6--Wri2->

Set :
2*[Con5] : ConnectsTheDots: 0 0 30 70
1*[Cow3] : CowTrainMaths: 0 0 70 30
1*[Cow5] : CowTrainReading: 70 0 0 30
1*[Tex1] : TextReading: 65 0 0 35
1*[Ord8] : Ordering: 0 0 75 25
1*[Wri4] : WritingLetters: 0 75 0 25
1*[Wri2] : WritingWords: 0 90 0 10
1*[Hol0] : HoledWords: 65 25 0 10
1*[Tim1] : TimeReading: 0 0 95 5
add->start
ModuleGE[dep6]->bestfork->start
ModuleGE[dep6]->bestfork>after find
Node[dep6]->bestfork->no match
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
ModuleGE[Wri2]->bestfork->match
Node[Wri2]->bestfork->module erased
Node[Wri2]->bestfork->recursive call and exit
Fork->bestFork->start
Fork->bestFork->right recursive call
ModuleGE[Hid3]->bestfork->start
ModuleGE[Hid3]->bestfork>after find
Node[Hid3]->bestfork->no match
Node[Hid3]->bestfork->new fork place
Fork->bestFork->start
Fork->bestFork->fork place already found, exit
Fork->bestFork->left recursive call
ModuleGE[Puz6]->bestfork->start
ModuleGE[Puz6]->bestfork>after find
Node[Puz6]->bestfork->no match
Node[Puz6]->bestfork->new fork place
ModuleGE[Ord8]->bestfork->start
ModuleGE[Ord8]->bestfork>after find
ModuleGE[Ord8]->bestfork->match
Node[Ord8]->bestfork->module erased
Node[Ord8]->bestfork->moving
Node[Ord8]->bestfork->recursive call and exit
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
Node[Wri2]->bestfork->no match
ModuleGE[Tex7]->bestfork->start
ModuleGE[Tex7]->bestfork>after find
Node[Tex7]->bestfork->no match
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
ModuleGE[Tim1]->bestfork->match
Node[Tim1]->bestfork->module erased
Node[Tim1]->bestfork->moving
Node[Tim1]->bestfork->recursive call and exit
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
Node[Tim1]->bestfork->no match
Junction->bestFork
Fork->bestFork->back from recursive calls
Fork->bestFork->left>=right, delete and exit
add->after bestFork
2*Con5
1*Cow3
1*Cow5
1*Tex1
1*Wri4
1*Hol0
-Puz6--Wri2--Tex7--Tim1->-Hol9--Alp2->-Con5->-arr7-
Node[Puz6]->bestJunction->start
Node[Puz6]->bestJunction->forward
Node[Puz6]->bestJunction->module not found
Node[Wri2]->bestJunction->start
Node[Wri2]->bestJunction->forward
Node[Wri2]->bestJunction->module not found
Node[Tex7]->bestJunction->start
Node[Tex7]->bestJunction->forward
Node[Tex7]->bestJunction->module not found
Node[Tim1]->bestJunction->start
Node[Tim1]->bestJunction->forward
Node[Tim1]->bestJunction->module not found
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned false=> junction place is bad
Junction->bestJunction->compatible side => forward recursive call
Node[Hol9]->bestJunction->start
Node[Hol9]->bestJunction->forward
Node[Hol9]->bestJunction->module not found
Node[Alp2]->bestJunction->start
Node[Alp2]->bestJunction->forward
Node[Alp2]->bestJunction->module not found
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned true (good result)
Junction->bestJunction->new junction place
Junction->bestJunction->exit
Junction->bestJunction->back from recursive call, exit
add->afterBestJunction
>
add->path
add->Modules left:
1*Con5
1*Cow3
1*Cow5
1*Tex1
1*Wri4
1*Hol0
add->forking left
add->forked first Node: Con5
add->node Cow3
add->node Cow5
add->node Tex1
add->node Wri4
add->node Hol0
add->pathed
add->junction left
add->juncted
-dep6--Wri2-<-Ord8--Tim1-<-Con5--Cow3--Cow5--Tex1--Wri4--Hol0->>-Con5->-arr7-
                         <-Puz6--Wri2--Tex7--Tim1->-Hol9--Alp2->
            <-Hid3-<-Wri4--Hol0--Tim1-<-Num0--Num0->
                                      <-Tim1-<-Cow5--Tex1--Cow3->
                                             <-Hid3->-Alp2->-Num0--Tex7->
                   <-Cow3--Cow3--Ord8-<-Wri4--Hol0->
                                      <-Hol9--Puz6--Wri2->

Set :
1*[Cow3] : CowTrainMaths: 0 0 70 30
1*[Tex1] : TextReading: 65 0 0 35
1*[Ord8] : Ordering: 0 0 75 25
2*[Wri2] : WritingWords: 0 90 0 10
2*[Alp2] : AlphabetSong: 20 0 0 80
2*[Num0] : NumberInWords/Figure: 15 0 75 10
1*[Hol0] : HoledWords: 65 25 0 10
add->start
ModuleGE[dep6]->bestfork->start
ModuleGE[dep6]->bestfork>after find
Node[dep6]->bestfork->no match
ModuleGE[Wri2]->bestfork->start
ModuleGE[Wri2]->bestfork>after find
ModuleGE[Wri2]->bestfork->match
Node[Wri2]->bestfork->module erased
Node[Wri2]->bestfork->recursive call and exit
Fork->bestFork->start
Fork->bestFork->right recursive call
ModuleGE[Hid3]->bestfork->start
ModuleGE[Hid3]->bestfork>after find
Node[Hid3]->bestfork->no match
Node[Hid3]->bestfork->new fork place
Fork->bestFork->start
Fork->bestFork->fork place already found, exit
Fork->bestFork->left recursive call
ModuleGE[Ord8]->bestfork->start
ModuleGE[Ord8]->bestfork>after find
ModuleGE[Ord8]->bestfork->match
Node[Ord8]->bestfork->module erased
Node[Ord8]->bestfork->recursive call and exit
ModuleGE[Tim1]->bestfork->start
ModuleGE[Tim1]->bestfork>after find
Node[Tim1]->bestfork->no match
Node[Tim1]->bestfork->new fork place
Fork->bestFork->start
Fork->bestFork->fork place already found, exit
Fork->bestFork->back from recursive calls
Fork->bestFork->left>=right, delete and exit
add->after bestFork
1*Cow3
1*Tex1
1*Wri2
2*Alp2
2*Num0
1*Hol0
-Tim1-<-Con5--Cow3--Cow5--Tex1--Wri4--Hol0->>-Con5->-arr7-
      <-Puz6--Wri2--Tex7--Tim1->-Hol9--Alp2->
Node[Tim1]->bestJunction->start
Node[Tim1]->bestJunction->forward
Node[Tim1]->bestJunction->module not found
Fork->bestJunction->start
Fork->bestJunction->moving forward
Fork->bestJunction->side = both
Fork->bestJunction->left recursive call
Node[Con5]->bestJunction->start
Node[Con5]->bestJunction->forward
Node[Con5]->bestJunction->module not found
Node[Cow3]->bestJunction->start
Node[Cow3]->bestJunction->forward
Node[Cow3]->bestJunction->module found or null
Node[Cow3]->bestJunction->removing module
Node[Cow3]->bestJunction->new junction place
Node[Cow3]->bestJunction->recursive call
Node[Cow5]->bestJunction->start
Node[Cow5]->bestJunction->forward
Node[Cow5]->bestJunction->module not found
Node[Cow5]->bestJunction->moving node
Node[Cow5]->bestJunction->recursive call and exit
Node[Tex1]->bestJunction->start
Node[Tex1]->bestJunction->forward
Node[Tex1]->bestJunction->module found or null
Node[Tex1]->bestJunction->removing module
Node[Tex1]->bestJunction->recursive call
Node[Wri4]->bestJunction->start
Node[Wri4]->bestJunction->forward
Node[Wri4]->bestJunction->module not found
Node[Wri4]->bestJunction->moving node
Node[Wri4]->bestJunction->recursive call and exit
Node[Hol0]->bestJunction->start
Node[Hol0]->bestJunction->forward
Node[Hol0]->bestJunction->module found or null
Node[Hol0]->bestJunction->removing module
Node[Hol0]->bestJunction->recursive call
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned false=> junction place is bad
Junction->bestJunction->compatible side => forward recursive call
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned false=> junction place is bad
Junction->bestJunction->compatible side => forward recursive call
Node[Con5]->bestJunction->start
Node[Con5]->bestJunction->forward
Node[Con5]->bestJunction->module not found
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned true (good result)
Junction->bestJunction->new junction place
Junction->bestJunction->exit
Junction->bestJunction->back from recursive call, exit
Junction->bestJunction->back from recursive call, exit
Node[Hol0]->bestJunction->junctionPlace was moved to another area
Node[Hol0]->bestJunction->replacing module in the list
Node[Hol0]->bestJunction->exit
Node[Tex1]->bestJunction->junctionPlace was moved to another area
Node[Tex1]->bestJunction->replacing module in the list
Node[Tex1]->bestJunction->exit
Node[Cow3]->bestJunction->junctionPlace was moved to another area
Node[Cow3]->bestJunction->replacing module in the list
Node[Cow3]->bestJunction->exit
Fork->bestJunction->right recursive call
Node[Puz6]->bestJunction->start
Node[Puz6]->bestJunction->forward
Node[Puz6]->bestJunction->module not found
Node[Wri2]->bestJunction->start
Node[Wri2]->bestJunction->forward
Node[Wri2]->bestJunction->module found or null
Node[Wri2]->bestJunction->removing module
Node[Wri2]->bestJunction->new junction place
Node[Wri2]->bestJunction->recursive call
Node[Tex7]->bestJunction->start
Node[Tex7]->bestJunction->forward
Node[Tex7]->bestJunction->module not found
Node[Tex7]->bestJunction->moving node
Node[Tex7]->bestJunction->recursive call and exit
Node[Tim1]->bestJunction->start
Node[Tim1]->bestJunction->forward
Node[Tim1]->bestJunction->module not found
Node[Tim1]->bestJunction->moving node
Node[Tim1]->bestJunction->recursive call and exit
Junction->bestJunction
Junction->bestJunction->moving forward
Junction->bestJunction->contains() call
Junction->bestJunction->contains() returned false=> junction place is bad
Junction->bestJunction->not compatible side
Junction->bestJunction->exit
Node[Wri2]->bestJunction->junctionPlace was moved to another area
Node[Wri2]->bestJunction->replacing module in the list
Node[Wri2]->bestJunction->exit
Fork->bestJunction->back from recursive calls
Fork->bestJunction->choosing left
Fork->bestJunction->exit
add->afterBestJunction
>
add->path
add->Modules left:
1*Cow3
1*Tex1
1*Wri2
2*Alp2
2*Num0
1*Hol0
add->forking left
add->forked first Node: Cow3
add->node Tex1
add->node Wri2
add->node Alp2
add->node Alp2
add->node Num0
add->node Num0
add->node Hol0
add->pathed
add->junction left
add->juncted
-dep6--Wri2-<-Ord8-<-Cow3--Tex1--Wri2--Alp2--Alp2--Num0--Num0--Hol0->>-arr7-
                   <-Tim1-<-Con5--Cow5--Wri4--Cow3--Tex1--Hol0->>-Con5->
                          <-Puz6--Tex7--Tim1--Wri2->-Hol9--Alp2->
            <-Hid3-<-Wri4--Hol0--Tim1-<-Num0--Num0->
                                      <-Tim1-<-Cow5--Tex1--Cow3->
                                             <-Hid3->-Alp2->-Num0--Tex7->
                   <-Cow3--Cow3--Ord8-<-Wri4--Hol0->
                                      <-Hol9--Puz6--Wri2->


Transforming the pre-graph in usable graph.
Getting the GE map and checking for validity.
Node[dep6]->distance and validity check
Node[dep6]->added to the distanceMap (d=0)
Node[dep6]->recursive call on next GE
Node[Wri2]->distance and validity check
Node[Wri2]->added to the distanceMap (d=1)
Node[Wri2]->recursive call on next GE
Fork->distance and validity check
Fork->fork not found in the map
Fork->fork added to the map
Fork->fork added to the map (d=1)
Fork->recursive call on left GE
Node[Ord8]->distance and validity check
Node[Ord8]->added to the distanceMap (d=2)
Node[Ord8]->recursive call on next GE
Fork->distance and validity check
Fork->fork not found in the map
Fork->fork added to the map
Fork->fork added to the map (d=2)
Fork->recursive call on left GE
Node[Cow3]->distance and validity check
Node[Cow3]->added to the distanceMap (d=3)
Node[Cow3]->recursive call on next GE
Node[Tex1]->distance and validity check
Node[Tex1]->added to the distanceMap (d=4)
Node[Tex1]->recursive call on next GE
Node[Wri2]->distance and validity check
Node[Wri2]->added to the distanceMap (d=5)
Node[Wri2]->recursive call on next GE
Node[Alp2]->distance and validity check
Node[Alp2]->added to the distanceMap (d=6)
Node[Alp2]->recursive call on next GE
Node[Alp2]->distance and validity check
Node[Alp2]->added to the distanceMap (d=7)
Node[Alp2]->recursive call on next GE
Node[Num0]->distance and validity check
Node[Num0]->added to the distanceMap (d=8)
Node[Num0]->recursive call on next GE
Node[Num0]->distance and validity check
Node[Num0]->added to the distanceMap (d=9)
Node[Num0]->recursive call on next GE
Node[Hol0]->distance and validity check
Node[Hol0]->added to the distanceMap (d=10)
Node[Hol0]->recursive call on next GE
Junction->distance and validity check
Junction->added to the map (d=10)
Junction->right recursive call
Node[Con5]->distance and validity check
Node[Con5]->added to the distanceMap (d=10)
Node[Con5]->recursive call on previous GE
Junction->distance and validity check
Junction->added to the map (d=9)
Junction->left recursive call
Junction->distance and validity check
Junction->added to the map (d=9)
Junction->left recursive call
Node[Hol0]->distance and validity check
Node[Hol0]->added to the distanceMap (d=9)
Node[Hol0]->recursive call on previous GE
Node[Tex1]->distance and validity check
Node[Tex1]->added to the distanceMap (d=8)
Node[Tex1]->recursive call on previous GE
Node[Cow3]->distance and validity check
Node[Cow3]->added to the distanceMap (d=7)
Node[Cow3]->recursive call on previous GE
Node[Wri4]->distance and validity check
Node[Wri4]->added to the distanceMap (d=6)
Node[Wri4]->recursive call on previous GE
Node[Cow5]->distance and validity check
Node[Cow5]->added to the distanceMap (d=5)
Node[Cow5]->recursive call on previous GE
Node[Con5]->distance and validity check
Node[Con5]->added to the distanceMap (d=4)
Node[Con5]->recursive call on previous GE
Fork->distance and validity check
Fork->fork not found in the map
Fork->fork added to the map
Fork->recursive call on previous GE
Node[Tim1]->distance and validity check
Node[Tim1]->added to the distanceMap (d=3)
Node[Tim1]->recursive call on previous GE
Fork->distance and validity check
Fork->fork already encountered once
Node[Tim1]->back from recursive call
Fork->back from recursive call
Node[Con5]->back from recursive call
Node[Cow5]->back from recursive call
Node[Wri4]->back from recursive call
Node[Cow3]->back from recursive call
Node[Tex1]->back from recursive call
Node[Hol0]->back from recursive call
Junction->back from recursive call
Junction->right recursive call
Node[Alp2]->distance and validity check
Node[Alp2]->added to the distanceMap (d=9)
Node[Alp2]->recursive call on previous GE
Node[Hol9]->distance and validity check
Node[Hol9]->added to the distanceMap (d=8)
Node[Hol9]->recursive call on previous GE
Junction->distance and validity check
Junction->added to the map (d=7)
Junction->left recursive call
Node[Wri2]->distance and validity check
Node[Wri2]->added to the distanceMap (d=7)
Node[Wri2]->recursive call on previous GE
Node[Tim1]->distance and validity check
Node[Tim1]->added to the distanceMap (d=6)
Node[Tim1]->recursive call on previous GE
Node[Tex7]->distance and validity check
Node[Tex7]->added to the distanceMap (d=5)
Node[Tex7]->recursive call on previous GE
Node[Puz6]->distance and validity check
Node[Puz6]->added to the distanceMap (d=4)
Node[Puz6]->recursive call on previous GE
Fork->distance and validity check
Fork->fork already encountered once
Node[Puz6]->back from recursive call
Node[Tex7]->back from recursive call
Node[Tim1]->back from recursive call
Node[Wri2]->back from recursive call
Junction->back from recursive call
Junction->right recursive call
Node[Num0]->distance and validity check
Node[Num0]->added to the distanceMap (d=7)
Node[Num0]->recursive call on previous GE
Node[Num0]->distance and validity check
Node[Num0]->added to the distanceMap (d=6)
Node[Num0]->recursive call on previous GE
Fork->distance and validity check
Fork->fork not found in the map
Fork->fork added to the map
Fork->recursive call on previous GE
Node[Tim1]->distance and validity check
Node[Tim1]->added to the distanceMap (d=5)
Node[Tim1]->recursive call on previous GE
Node[Hol0]->distance and validity check
Node[Hol0]->added to the distanceMap (d=4)
Node[Hol0]->recursive call on previous GE
Node[Wri4]->distance and validity check
Node[Wri4]->added to the distanceMap (d=3)
Node[Wri4]->recursive call on previous GE
Fork->distance and validity check
Fork->fork not found in the map
Fork->fork added to the map
Fork->recursive call on previous GE
Node[Hid3]->distance and validity check
Node[Hid3]->added to the distanceMap (d=2)
Node[Hid3]->recursive call on previous GE
Fork->distance and validity check
Fork->fork already encountered once
Node[Hid3]->back from recursive call
Fork->back from recursive call
Node[Wri4]->back from recursive call
Node[Hol0]->back from recursive call
Node[Tim1]->back from recursive call
Fork->back from recursive call
Node[Num0]->back from recursive call
Node[Num0]->back from recursive call
Junction->back from recursive call
Node[Hol9]->back from recursive call
Node[Alp2]->back from recursive call
Junction->back from recursive call
Junction->back from recursive call
Junction->right recursive call
Node[Cow3]->distance and validity check
Node[Cow3]->added to the distanceMap (d=9)
Node[Cow3]->recursive call on previous GE
Node[Tex1]->distance and validity check
Node[Tex1]->added to the distanceMap (d=8)
Node[Tex1]->recursive call on previous GE
Node[Cow5]->distance and validity check
Node[Cow5]->added to the distanceMap (d=7)
Node[Cow5]->recursive call on previous GE
Fork->distance and validity check
Fork->fork not found in the map
Fork->fork added to the map
Fork->recursive call on previous GE
Node[Tim1]->distance and validity check
Node[Tim1]->added to the distanceMap (d=6)
Node[Tim1]->recursive call on previous GE
Fork->distance and validity check
Fork->fork already encountered once
Node[Tim1]->back from recursive call
Fork->back from recursive call
Node[Cow5]->back from recursive call
Node[Tex1]->back from recursive call
Node[Cow3]->back from recursive call
Junction->back from recursive call
Node[Con5]->back from recursive call
Junction->back from recursive call
Junction->next recursive call
Junction->distance and validity check
Junction->added to the map (d=10)
Junction->right recursive call
Node[Tex7]->distance and validity check
Node[Tex7]->added to the distanceMap (d=10)
Node[Tex7]->recursive call on previous GE
Node[Num0]->distance and validity check
Node[Num0]->added to the distanceMap (d=9)
Node[Num0]->recursive call on previous GE
Junction->distance and validity check
Junction->added to the map (d=8)
Junction->left recursive call
Node[Alp2]->distance and validity check
Node[Alp2]->added to the distanceMap (d=8)
Node[Alp2]->recursive call on previous GE
Junction->distance and validity check
Junction->added to the map (d=7)
Junction->left recursive call
Node[Hid3]->distance and validity check
Node[Hid3]->added to the distanceMap (d=7)
Node[Hid3]->recursive call on previous GE
Fork->distance and validity check
Fork->fork already encountered once
Node[Hid3]->back from recursive call
Junction->back from recursive call
Junction->right recursive call
Node[Hol0]->distance and validity check
Node[Hol0]->added to the distanceMap (d=7)
Node[Hol0]->recursive call on previous GE
Node[Wri4]->distance and validity check
Node[Wri4]->added to the distanceMap (d=6)
Node[Wri4]->recursive call on previous GE
Fork->distance and validity check
Fork->fork not found in the map
Fork->fork added to the map
Fork->recursive call on previous GE
Node[Ord8]->distance and validity check
Node[Ord8]->added to the distanceMap (d=5)
Node[Ord8]->recursive call on previous GE
Node[Cow3]->distance and validity check
Node[Cow3]->added to the distanceMap (d=4)
Node[Cow3]->recursive call on previous GE
Node[Cow3]->distance and validity check
Node[Cow3]->added to the distanceMap (d=3)
Node[Cow3]->recursive call on previous GE
Fork->distance and validity check
Fork->fork already encountered once
Node[Cow3]->back from recursive call
Node[Cow3]->back from recursive call
Node[Ord8]->back from recursive call
Fork->back from recursive call
Node[Wri4]->back from recursive call
Node[Hol0]->back from recursive call
Junction->back from recursive call
Node[Alp2]->back from recursive call
Junction->back from recursive call
Junction->right recursive call
Node[Wri2]->distance and validity check
Node[Wri2]->added to the distanceMap (d=8)
Node[Wri2]->recursive call on previous GE
Node[Puz6]->distance and validity check
Node[Puz6]->added to the distanceMap (d=7)
Node[Puz6]->recursive call on previous GE
Node[Hol9]->distance and validity check
Node[Hol9]->added to the distanceMap (d=6)
Node[Hol9]->recursive call on previous GE
Fork->distance and validity check
Fork->fork already encountered once
Node[Hol9]->back from recursive call
Node[Puz6]->back from recursive call
Node[Wri2]->back from recursive call
Junction->back from recursive call
Node[Num0]->back from recursive call
Node[Tex7]->back from recursive call
Junction->back from recursive call
Junction->next recursive call
Node[arr7]->distance and validity check
Node[arr7]->added to the distanceMap (d=11)
Junction->back from recursive call
Junction->back from recursive call
Node[Hol0]->back from recursive call
Node[Num0]->back from recursive call
Node[Num0]->back from recursive call
Node[Alp2]->back from recursive call
Node[Alp2]->back from recursive call
Node[Wri2]->back from recursive call
Node[Tex1]->back from recursive call
Node[Cow3]->back from recursive call
Fork->back from recursive call
Node[Ord8]->back from recursive call
Fork->back from recursive call
Node[Wri2]->back from recursive call
Node[dep6]->back from recursive call
The pre-graph is valid.


Encounter and insertion of node Wri4(3,30) there: done.
Encounter and insertion of node Tim1(5,28) there: done.
Encounter and insertion of node Con5(10,12) there: done.
Encounter and insertion of node Hid3(2,31) there: done.
Encounter and insertion of node Cow3(9,32) there: done.
Encounter and insertion of node Cow5(7,34) there: done.
Encounter and insertion of node Wri2(1,2) there: done.
Encounter and insertion of node Hid3(7,39) not there... there: done.
Encounter and insertion of node Alp2(8,38) there: done.
Encounter and insertion of node dep6(0,1) there: done.
Encounter
Encounter
Encounter and insertion of node Tex7(10,36) not there... there: done.
Encounter and insertion of node arr7(11,48) there: done.
Encounter and insertion of node Num0(9,37) not there... there: done.
Encounter and insertion of node Hol0(4,29) there: done.
Encounter and insertion of node Tex1(8,33) there: done.
Encounter and insertion of node Tim1(6,35) there: done.
Encounter
Encounter and insertion of node Hol0(7,40) not there... not there... there: done.
Encounter
Encounter and insertion of node Wri4(6,41) not there... there: done.
Encounter
Encounter and insertion of node Hol9(8,21) there: done.
Encounter
Encounter and insertion of node Num0(7,26) there: done.
Encounter and insertion of node Alp2(9,20) there: done.
Encounter and insertion of node Num0(6,27) there: done.
Encounter and insertion of node Cow3(3,44) not there... there: done.
Encounter and insertion of node Ord8(5,42) not there... there: done.
Encounter and insertion of node Hol9(6,47) not there... not there... not there... there: done.
Encounter and insertion of node Wri2(8,45) not there... not there... not there... there: done.
Encounter
Encounter and insertion of node Puz6(7,46) not there... not there... not there... not there... there: done.
Encounter
Encounter and insertion of node Cow3(4,43) not there... there: done.
Encounter and insertion of node Con5(4,18) there: done.
Encounter
Encounter and insertion of node Hol0(9,13) there: done.
Encounter and insertion of node Wri4(6,16) there: done.
Encounter and insertion of node Ord8(2,3) there: done.
Encounter and insertion of node Tex7(5,24) there: done.
Encounter
Encounter and insertion of node Puz6(4,25) not there... there: done.
Encounter
Encounter and insertion of node Cow3(7,15) there: done.
Encounter and insertion of node Cow5(5,17) there: done.
Encounter and insertion of node Tex1(8,14) there: done.
Encounter and insertion of node Tim1(3,19) there: done.
Encounter and insertion of node Wri2(7,22) not there... there: done.
Encounter
Encounter and insertion of node Tim1(6,23) not there... there: done.
Encounter
Encounter and insertion of node Tex1(4,5) there: done.
Encounter and insertion of node Alp2(7,8) there: done.
Encounter and insertion of node Cow3(3,4) there: done.
Encounter and insertion of node Hol0(10,11) there: done.
Encounter and insertion of node Num0(8,9) there: done.
Encounter and insertion of node Wri2(5,6) there: done.
Encounter
Encounter and insertion of node Alp2(6,7) there: done.
Encounter and insertion of node Num0(9,10) there: done.

Added the list of node to the graph.

Adding children to node Wri4: Hol0
Adding children to node Tim1: FRET Num0 Tim1
Adding children to node Con5: arr7
Adding children to node Hid3: FRET Wri4 Cow3
Adding children to node Cow3: Con5
Adding children to node Cow5: Tex1
Adding children to node Wri2: FRET Ord8 Hid3
Adding children to node Hid3: Alp2
Adding children to node Alp2: Num0
Adding children to node dep6: Wri2
Adding children to node Tex7: arr7
Adding children to node arr7:
Adding children to node Num0: Tex7
Adding children to node Hol0: Tim1
Adding children to node Tex1: Cow3
Adding children to node Tim1: FRET Cow5 Hid3
Adding children to node Hol0: Alp2
Adding children to node Wri4: Hol0
Adding children to node Hol9: Alp2
Adding children to node Num0: Hol9
Adding children to node Alp2: Con5
Adding children to node Num0: Num0
Adding children to node Cow3: Cow3
Adding children to node Ord8: FRET Wri4 Hol9
Adding children to node Hol9: Puz6
Adding children to node Wri2: Num0
Adding children to node Puz6: Wri2
Adding children to node Cow3: Ord8
Adding children to node Con5: Cow5
Adding children to node Hol0: Con5
Adding children to node Wri4: Cow3
Adding children to node Ord8: FRET Cow3 Tim1
Adding children to node Tex7: Tim1
Adding children to node Puz6: Tex7
Adding children to node Cow3: Tex1
Adding children to node Cow5: Wri4
Adding children to node Tex1: Hol0
Adding children to node Tim1: FRET Con5 Puz6
Adding children to node Wri2: Hol9
Adding children to node Tim1: Wri2
Adding children to node Tex1: Wri2
Adding children to node Alp2: Num0
Adding children to node Cow3: Tex1
Adding children to node Hol0: arr7
Adding children to node Num0: Num0
Adding children to node Wri2: Alp2
Adding children to node Alp2: Alp2
Adding children to node Num0: Hol0

Usable graph completely generated.

Graph of dimensions (12,8):
dep6(1)     
Wri2(2)     
Ord8(2)     Hid3(2)     
Cow3(1)     Tim1(2)     Wri4(1)     Cow3(1)     
Tex1(1)     Con5(1)     Puz6(1)     Hol0(1)     Cow3(1)     
Wri2(1)     Cow5(1)     Tex7(1)     Tim1(2)     Ord8(2)     
Alp2(1)     Wri4(1)     Tim1(1)     Num0(1)     Tim1(2)     Wri4(1)     Hol9(1)     
Alp2(1)     Cow3(1)     Wri2(1)     Num0(1)     Cow5(1)     Hid3(1)     Hol0(1)     Puz6(1)     
Num0(1)     Tex1(1)     Hol9(1)     Tex1(1)     Alp2(1)     Wri2(1)     
Num0(1)     Hol0(1)     Alp2(1)     Cow3(1)     Num0(1)     
Hol0(1)     Con5(1)     Tex7(1)     
arr7(0)     
